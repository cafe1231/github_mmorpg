// internal/external/clients.go
package external

import (
	"time"

	"github.com/google/uuid"
)

// PlayerInfo représente les informations d'un joueur
type PlayerInfo struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Level    int       `json:"level"`
	Class    string    `json:"class"`
	Race     string    `json:"race"`
	IsOnline bool      `json:"is_online"`
	LastSeen time.Time `json:"last_seen"`
}

// PlayerClientInterface définit les méthodes du client Player
type PlayerClientInterface interface {
	GetPlayerInfo(playerID uuid.UUID) (*PlayerInfo, error)
	IsPlayerOnline(playerID uuid.UUID) (bool, error)
	GetPlayerLevel(playerID uuid.UUID) (int, error)
	ValidatePlayer(playerID uuid.UUID) error
}

// WorldClientInterface définit les méthodes du client World
type WorldClientInterface interface {
	GetZoneInfo(zoneID string) (*ZoneInfo, error)
	IsZoneAvailable(zoneID string) (bool, error)
	ValidatePosition(zoneID string, x, y, z float64) (bool, error)
}

// ZoneInfo représente les informations d'une zone
type ZoneInfo struct {
	ID          string  `json:"id"`
	Name        string  `json:"name"`
	Type        string  `json:"type"`
	MinLevel    int     `json:"min_level"`
	MaxLevel    int     `json:"max_level"`
	IsPvPZone   bool    `json:"is_pvp_zone"`
	IsAvailable bool    `json:"is_available"`
	MaxPlayers  int     `json:"max_players"`
}

// PlayerClient implémente l'interface PlayerClientInterface
type PlayerClient struct {
	baseURL string
}

// NewPlayerClient crée une nouvelle instance du client Player
func NewPlayerClient(baseURL string) PlayerClientInterface {
	return &PlayerClient{baseURL: baseURL}
}

// GetPlayerInfo récupère les informations d'un joueur
func (c *PlayerClient) GetPlayerInfo(playerID uuid.UUID) (*PlayerInfo, error) {
	// TODO: Implémenter l'appel HTTP vers le service Player
	// Pour l'instant, retourner des données par défaut
	return &PlayerInfo{
		ID:       playerID,
		Name:     "Player_" + playerID.String()[:8],
		Level:    50,
		Class:    "warrior",
		Race:     "human",
		IsOnline: true,
		LastSeen: time.Now(),
	}, nil
}

// IsPlayerOnline vérifie si un joueur est en ligne
func (c *PlayerClient) IsPlayerOnline(playerID uuid.UUID) (bool, error) {
	// TODO: Implémenter l'appel HTTP
	return true, nil
}

// GetPlayerLevel récupère le niveau d'un joueur
func (c *PlayerClient) GetPlayerLevel(playerID uuid.UUID) (int, error) {
	// TODO: Implémenter l'appel HTTP
	return 50, nil
}

// ValidatePlayer valide l'existence d'un joueur
func (c *PlayerClient) ValidatePlayer(playerID uuid.UUID) error {
	// TODO: Implémenter l'appel HTTP
	return nil
}

// WorldClient implémente l'interface WorldClientInterface
type WorldClient struct {
	baseURL string
}

// NewWorldClient crée une nouvelle instance du client World
func NewWorldClient(baseURL string) WorldClientInterface {
	return &WorldClient{baseURL: baseURL}
}

// GetZoneInfo récupère les informations d'une zone
func (c *WorldClient) GetZoneInfo(zoneID string) (*ZoneInfo, error) {
	// TODO: Implémenter l'appel HTTP vers le service World
	// Pour l'instant, retourner des données par défaut
	return &ZoneInfo{
		ID:          zoneID,
		Name:        "Zone_" + zoneID,
		Type:        "arena",
		MinLevel:    1,
		MaxLevel:    100,
		IsPvPZone:   true,
		IsAvailable: true,
		MaxPlayers:  20,
	}, nil
}

// IsZoneAvailable vérifie si une zone est disponible
func (c *WorldClient) IsZoneAvailable(zoneID string) (bool, error) {
	// TODO: Implémenter l'appel HTTP
	return true, nil
}

// ValidatePosition valide une position dans une zone
func (c *WorldClient) ValidatePosition(zoneID string, x, y, z float64) (bool, error) {
	// TODO: Implémenter l'appel HTTP
	// Validation basique pour éviter les positions extremes
	if x < -1000 || x > 1000 || y < -100 || y > 1000 || z < -1000 || z > 1000 {
		return false, nil
	}
	return true, nil
}